{"name":"Mongomapper.net","body":"## MongoMapper.NET\r\n\r\nA .NET Object Mapper for MongoDB over MongoDB C# Driver\r\n\r\n### Dependencies\r\n\r\n* [MongoDB distributions] (http://www.mongodb.org/downloads)\r\n* [MongoDB Driver for CSharp] (http://github.com/mongodb/mongo-csharp-driver)\r\n* [ServiceStack.Text] (http://github.com/ServiceStack/ServiceStack.Text)\r\n* [NUnit] (http://www.nunit.org), [NUnit for Visual Studio] (http://nunitforvs.codeplex.com)\r\n\r\n### Defining the Model\r\n\r\n\t[MongoKey(KeyFields = \"Code\")]\r\n\tpublic class Country: MongoMapper\r\n\t{        \r\n\t\t[MongoDownRelation(ObjectName = \"Person\", FieldName = \"Country\")]\r\n\t\tpublic string Code { get; set; }\r\n\t\tpublic string Name { get; set; }\r\n\r\n\t\t[MongoPropertyValidator(PropertyName=\"Code\")]\r\n\t\tpublic void CodeIsUp(string CountryCode)\r\n\t\t{\r\n\t\t\tif (CountryCode != CountryCode.ToUpper())\r\n\t\t\t\tthrow new Exception(String.Format(\"{0} must be {1}\", CountryCode, CountryCode.ToUpper()));\r\n\t\t}\r\n\t}\r\n\r\n\t[MongoKey(KeyFields = \"\")]\r\n\t[MongoIndex(IndexFields = \"ID,Country\")]\r\n\t[MongoIndex(IndexFields =  \"Name\")]\r\n\t[MongoMapperIdIncrementable(IncremenalId = true, ChildsIncremenalId = true)]\r\n\tpublic class Person : MongoMapper\r\n\t{        \r\n\t\tpublic Person()\r\n\t\t{\r\n\t\t\tChilds = new List<Child>();\r\n\t\t}\r\n\t\t\t\t\r\n\t\tpublic string Name { get; set; }\r\n\t\tpublic int Age { get; set; }\r\n\t\tpublic DateTime BirthDate { get; set; }\r\n\t\tpublic bool Married { get; set; }\r\n\t\tpublic decimal BankBalance { get; set; }\r\n\t\t\r\n\t\t[MongoUpRelation(ObjectName = \"Country\", FieldName = \"Code\")]\r\n\t\tpublic string Country { get; set; }\r\n\t\t\t \r\n\t\t[MongoChildCollection]\r\n\t\tpublic List<Child> Childs { get; set;}\r\n\t}\r\n\t\r\n### Work with the Model\r\n\r\n\t\tCountry c = new Country {Code = \"es\", Name = \"EspaÃ±a\"};\r\n\t\ttry\r\n\t\t{\r\n\t\t\tc.Save();\r\n\t\t}\r\n\t\tcatch(Exception ex)\r\n\t\t{\r\n\t\t\tAssert.AreEqual(ex.GetBaseException().GetType(), typeof(ValidatePropertyException)); \r\n\t\t\tc.Code = \"ES\";\r\n\t\t\tc.Save();\r\n\t\t}\r\n\t\t\r\n\t\tc = new Country { Code = \"UK\", Name = \"Reino Unido\" };\r\n\t\tc.Save();\r\n\t\t\r\n\t\tc = new Country { Code = \"UK\", Name = \"Reino Unido\" };\r\n\t\ttry\r\n\t\t{\r\n\t\t\tc.Save();\r\n\t\t}\r\n\t\tcatch (Exception ex)\r\n\t\t{\r\n\t\t\tAssert.AreEqual(ex.GetBaseException().GetType(),typeof(DuplicateKeyException));\t\r\n\t\t}\r\n\t\t\r\n\t\tCountry c2 = new Country { Code = \"US\", Name = \"Francia\" };\r\n        c2.OnBeforeInsert += (s, e) => { ((Country)s).Name = \"Estados Unidos\"; };            \r\n        c2.Save();\r\n\r\n        Country c3 = new Country();\r\n\t\tc3.FillByKey(\"US\");\r\n        Assert.AreEqual(c3.Name, \"Estados Unidos\");\r\n\t\t\r\n\t\tList<Country> countries = new List<Country>();\r\n\t\tcountries.MongoFind();\r\n\t\tAssert.AreEqual(countries.Count, 3);\r\n\r\n\t\tcountries.MongoFind(Query.Or(MongoQuery.Eq((Country co) => co.Code, \"ES\"), MongoQuery.Eq((Country co) => co.Code, \"UK\")));\r\n\t\tAssert.AreEqual(countries.Count, 2);\r\n\t\t\r\n\t\tPerson p = new Person\r\n\t\t{\r\n\t\t\tName = \"Pepito Perez\",\r\n\t\t\tAge = 35,\r\n\t\t\tBirthDate = DateTime.Now.AddDays(57).AddYears(-35),\r\n\t\t\tMarried = true,\r\n\t\t\tCountry = \"XXXXX\",\r\n\t\t\tBankBalance = decimal.Parse(\"3500,00\")\r\n\t\t};\r\n\r\n\t\tp.Childs.Add(new Child() { ID = 1, Age = 10, BirthDate = DateTime.Now.AddDays(57).AddYears(-10), Name = \"Juan Perez\" });\t\t\r\n\r\n\t\ttry\r\n        {\r\n            p.Save();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n\t\t\tAssert.AreEqual(ex.GetBaseException().GetType(), typeof(ValidateUpRelationException));\r\n            p.Country = \"ES\";\r\n            p.Save();\r\n        }\t\r\n\r\n\t\tp.ServerUpdate(Update.PushWrapped(\"Childs\", new Child() { ID = 2, Age = 2, BirthDate = DateTime.Now.AddDays(57).AddYears(-7), Name = \"Ana Perez\" }));\t\t\r\n\t\t\r\n\t\tList<Person> persons = new List<Person>();\r\n\t\tpersons.MongoFind(\"Childs.Age\",2);\r\n\t\tAssert.AreEqual(persons.Count, 1);\r\n\r\n\r\n### You can find examples in the Test Project \r\n\r\n* [Class Definition](https://github.com/emiliotorrens/MongoMapper.NET/tree/master/EtoolTech.MongoDB.Mapper.Test.NUnit/Classes) \r\n* [Find] (https://github.com/emiliotorrens/MongoMapper.NET/blob/master/EtoolTech.MongoDB.Mapper.Test.NUnit/FindTest.cs)\r\n* [Write] (https://github.com/emiliotorrens/MongoMapper.NET/blob/master/EtoolTech.MongoDB.Mapper.Test.NUnit/InsertModifyDeleteTest.cs)\r\n* [Incremental ID] (https://github.com/emiliotorrens/MongoMapper.NET/blob/master/EtoolTech.MongoDB.Mapper.Test.NUnit/IncrementalIdTest.cs)\r\n* [Relations](https://github.com/emiliotorrens/MongoMapper.NET/blob/master/EtoolTech.MongoDB.Mapper.Test.NUnit/RelationsTest.cs) \r\n* [Events] (https://github.com/emiliotorrens/MongoMapper.NET/blob/master/EtoolTech.MongoDB.Mapper.Test.NUnit/EventsTest.cs)\r\n* [Extension Methods] (https://github.com/emiliotorrens/MongoMapper.NET/blob/master/EtoolTech.MongoDB.Mapper.Test.NUnit/ExtensionTest.cs)\r\n* [Original Version] (https://github.com/emiliotorrens/MongoMapper.NET/blob/master/EtoolTech.MongoDB.Mapper.Test.NUnit/OriginalObjectTest.cs)\r\n \r\n### Change Log\r\n\r\n* [30/12/2011] (http://bit.ly/uy80RE)\r\n* [05/01/2012] (http://bit.ly/yfcsn4)\r\n* [02/02/2012] (http://bit.ly/AfGfKC)\r\n* [14/02/2012] (http://bit.ly/zvnk0F)\r\n* [07/03/2012] (http://bit.ly/wMX6Ha)\r\n* [20/03/2012] (http://bit.ly/GAIbez)\r\n \r\n\r\n","tagline":"A .NET Object Mapper for MongoDB over MongoDB C# Driver","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}